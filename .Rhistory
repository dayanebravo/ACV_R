gka = elementos_negativa_lamb * elementos_Sj
# Imprimindo o resultado da sensibilidade de g
print(gka)
teste = elementos_Sj*qkl_lambda
linhas_qkl_lambda <- length(qkl_lambda)
num_col_q <- ncol(Q)
num_segmentos <- linhas_qkl_lambda/num_col_q
if (length(qkl_lambda) %% num_segmentos==0){
tamanho_segmento <- length(qkl_lambda)/num_segmentos
segmentos <- split(teste, rep(1:num_segmentos, each = tamanho_segmento))
somatorio <- numeric(num_segmentos)
for (i in 1:num_segmentos) {
somatorio[i] <- sum(segmentos[[i]])
}
print(somatorio)
}
print(qkl_lambda)
teste = elementos_Sj*qkl_lambda
print(teste)
g = M #já havíamos calculado, porém com outra notação M = B %*% s
elementos_Sj <- numeric(num_linhas_s * num_colunas_lam)
delta <- numeric(num_linhas_lamb * num_colunas_lam)
indice_delta <- 1
indice_sj <- 1
for (i in 1:num_linhas_lamb) {
for (j in 1:num_linhas_s) {
for (k in 1:num_colunas_lam) {
if (k == i) {  # quando i=j preenchemos o delta com 1, o restante é 0
delta[indice_delta] <- 1
}
else {
delta[indice_delta] <- 0
}
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
indice_delta <- indice_delta + 1
}
}
}
gkb = delta * elementos_Sj
# Imprimindo o resultado da sensibilidade de g com delta
print(gkb)
g = M #já havíamos calculado, porém com outra notação M = B %*% s
elementos_Sj <- numeric(num_linhas_s * num_colunas_lam)
delta <- numeric(num_linhas_lamb * num_colunas_lam)
indice_delta <- 1
indice_sj <- 1
for (i in 1:num_linhas) {
for (j in 1:num_colunas) {
for (k in 1:num_linhas) {
if (k == i) {  # quando i=j preenchemos o delta com 1, o restante é 0
delta[indice_delta] <- 1
}
else {
delta[indice_delta] <- 0
}
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
indice_delta <- indice_delta + 1
}
}
}
gkb = delta * elementos_Sj
# Imprimindo o resultado da sensibilidade de g com delta
print(gkb)
g = B %*% s #M #já havíamos calculado, porém com outra notação M = B %*% s
elementos_Sj <- numeric(num_linhas_s * num_colunas_lam)
delta <- numeric(num_linhas_lamb * num_colunas_lam)
indice_delta <- 1
indice_sj <- 1
for (i in 1:num_linhas) {
for (j in 1:num_colunas) {
for (k in 1:num_linhas) {
if (k == i) {  # quando i=j preenchemos o delta com 1, o restante é 0
delta[indice_delta] <- 1
}
else {
delta[indice_delta] <- 0
}
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
indice_delta <- indice_delta + 1
}
}
}
gkb = delta * elementos_Sj
# Imprimindo o resultado da sensibilidade de g com delta
print(gkb)
elementos_Sj <- numeric(num_linhas_s * num_linhas_lamb)
delta <- numeric(num_linhas_lamb * num_colunas_lam)
indice_delta <- 1
indice_sj <- 1
for (i in 1:num_linhas) {
for (j in 1:num_colunas) {
for (k in 1:num_linhas) {
if (k == i) {  # quando i=j preenchemos o delta com 1, o restante é 0
delta[indice_delta] <- 1
}
else {
delta[indice_delta] <- 0
}
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
indice_delta <- indice_delta + 1
}
}
}
gkb = delta * elementos_Sj
# Imprimindo o resultado da sensibilidade de g com delta
print(gkb)
g = B %*% s #M #já havíamos calculado, porém com outra notação M = B %*% s
num_linhas_g <- nrow(g)
elementos_Sj <- numeric(num_linhas_s * num_linhas_g * num_linhas_lamb)
delta <- numeric(num_linhas_s * num_linhas_g * num_linhas_lamb)
indice_delta <- 1
indice_sj <- 1
for (i in 1:num_linhas) {
for (j in 1:num_colunas) {
for (k in 1:num_linhas) {
if (k == i) {  # quando i=j preenchemos o delta com 1, o restante é 0
delta[indice_delta] <- 1
}
else {
delta[indice_delta] <- 0
}
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
indice_delta <- indice_delta + 1
}
}
}
gkb = delta * elementos_Sj
# Imprimindo o resultado da sensibilidade de g com delta
print(gkb)
num_linhas_g <- nrow(g)
elementos_Sj <- numeric(num_linhas_s * num_linhas_g * num_linhas_lamb)
delta <- numeric(num_linhas_s * num_linhas_g * num_linhas_lamb)
print(length(delta,elementos_Sj))
lementos_Sj <- numeric(num_linhas_s * num_linhas_g * num_linhas_lamb)
delta <- numeric(num_linhas_s * num_linhas_g * num_linhas_lamb)
print(length(delta))
# Número de linhas e colunas da inversa da A e de S
num_linhas_invA <- nrow(inversa_A)
num_colunas_invA <- ncol(inversa_A)
num_linhas_s <- nrow(s)
negativa_invA = -inversa_A #negativa da invA
#criando vetores para guardar os elementros de s e invA
elementos_negativa <- numeric(num_linhas_invA * num_colunas_invA)
elementos_Sj <- numeric(num_linhas_s * num_linhas_invA)
indice_neg <- 1
indice_sj <- 1
#a ordem de i, j e k são importantes, pois vão organizar as posições dos vetores
#eles serão multiplicados após essas interações
for (i in 1:num_colunas_invA) {
for (j in 1:num_linhas_s) {
for (k in 1:num_linhas_invA) {
elementos_negativa[indice_neg] <- negativa_invA[k, i] #guarda o elemento da posição k,i no vetor
indice_neg <- indice_neg + 1
elementos_Sj[indice_sj] <- s[j] #guarda o elemento da posição j no vetor
indice_sj <- indice_sj + 1
}
}
}
ska = elementos_negativa * elementos_Sj
# Imprimindo o resultado da sensibilidade de s
print(ska)
print(elementos_negativa)
#criando vetores para guardar os elementros de s e invA
elementos_negativa <- numeric(num_linhas_invA * num_colunas_invA*num_linhas_s)
elementos_Sj <- numeric(num_linhas_s * num_linhas_invA*num_linhas_s)
indice_neg <- 1
indice_sj <- 1
#a ordem de i, j e k são importantes, pois vão organizar as posições dos vetores
#eles serão multiplicados após essas interações
for (i in 1:num_colunas_invA) {
for (j in 1:num_linhas_s) {
for (k in 1:num_linhas_invA) {
elementos_negativa[indice_neg] <- negativa_invA[k, i] #guarda o elemento da posição k,i no vetor
indice_neg <- indice_neg + 1
elementos_Sj[indice_sj] <- s[j] #guarda o elemento da posição j no vetor
indice_sj <- indice_sj + 1
}
}
}
ska = elementos_negativa * elementos_Sj
# Imprimindo o resultado da sensibilidade de s
print(ska)
elementos_negativa <- numeric()
elementos_Sj <- numeric(num_linhas_s * num_linhas_invA*num_linhas_s)
indice_neg <- 1
indice_sj <- 1
#a ordem de i, j e k são importantes, pois vão organizar as posições dos vetores
#eles serão multiplicados após essas interações
for (i in 1:num_colunas_invA) {
for (j in 1:num_linhas_s) {
for (k in 1:num_linhas_invA) {
elementos_negativa[indice_neg] <- negativa_invA[k, i] #guarda o elemento da posição k,i no vetor
indice_neg <- indice_neg + 1
elementos_Sj[indice_sj] <- s[j] #guarda o elemento da posição j no vetor
indice_sj <- indice_sj + 1
}
}
}
ska = elementos_negativa * elementos_Sj
# Imprimindo o resultado da sensibilidade de s
print(ska)
print(ska)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
#elementos_negativa <- numeric(num_linhas_invA * num_colunas_invA*num_linhas_s)
elementos_negativa <- numeric()
elementos_Sj <- numeric(num_linhas_s * num_linhas_invA*num_linhas_s)
indice_neg <- 1
indice_sj <- 1
#a ordem de i, j e k são importantes, pois vão organizar as posições dos vetores
#eles serão multiplicados após essas interações
for (i in 1:num_colunas_invA) {
for (j in 1:num_linhas_s) {
for (k in 1:num_linhas_invA) {
elementos_negativa[indice_neg] <- negativa_invA[k, i] #guarda o elemento da posição k,i no vetor
indice_neg <- indice_neg + 1
elementos_Sj[indice_sj] <- s[j] #guarda o elemento da posição j no vetor
indice_sj <- indice_sj + 1
}
}
}
ska = elementos_negativa * elementos_Sj
# Imprimindo o resultado da sensibilidade de s
print(ska)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
lambda = B %*% inversa_A #cálculo do lambda
num_linhas_lamb <- nrow(lambda)
num_colunas_lamb <- ncol(lambda)
negativa_lambda = -lambda
#criando vetores para guardar os elementros de s e neg_lambda
elementos_negativa_lamb <- numeric()
elementos_Sj <- numeric() #novo vetor para sj, sobrescreve o anterior
indice_neg <- 1
indice_sj <- 1
for (i in 1:num_colunas_lamb) {
for (j in 1:num_linhas_s) {
for (k in 1:num_linhas_lamb) {
elementos_negativa_lamb[indice_neg] <- negativa_lambda[k, i]
indice_neg <- indice_neg + 1
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
}
}
}
gka = elementos_negativa_lamb * elementos_Sj
# Imprimindo o resultado da sensibilidade de g
print(gka)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
for (i in 1:num_linhas) {
for (j in 1:num_colunas) {
for (k in 1:num_linhas) {
if (k == i) {  # quando i=j preenchemos o delta com 1, o restante é 0
delta[indice_delta] <- 1
}
else {
delta[indice_delta] <- 0
}
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
indice_delta <- indice_delta + 1
}
}
}
g = M #já havíamos calculado, porém com outra notação M = B %*% s
num_linhas_b <- nrow(B)
num_linhas_g <- nrow(g)
elementos_Sj <- numeric()
delta <- numeric()
indice_delta <- 1
indice_sj <- 1
for (i in 1:num_linhas_b) {
for (j in 1:num_linhas_s) {
for (k in 1:num_linhas_g) {
if (k == i) {  # quando i=j preenchemos o delta com 1, o restante é 0
delta[indice_delta] <- 1
}
else {
delta[indice_delta] <- 0
}
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
indice_delta <- indice_delta + 1
}
}
}
gkb = delta * elementos_Sj
# Imprimindo o resultado da sensibilidade de g com delta
print(gkb)
num_linhas_q <- nrow(Q)
num_colunas_q <- ncol(Q)
elementos_Sj <- numeric()
qkl <- numeric()
lambda_li <- numeric()
indice_lambda_li <- 1
indice_sj <- 1
indice_qkl <- 1
for (i in 1:num_colunas_lamb) {
for (j in 1:num_linhas_s) {
for (k in 1:num_linhas_q) {
for (l in 1:num_colunas_q) {
elementos_Sj[indice_sj] <- -s[j]
qkl[indice_qkl] <- Q[k,l]
lambda_li[indice_lambda_li] <- lambda[l,i]
indice_sj <- indice_sj + 1
indice_lambda_li <- indice_lambda_li + 1
indice_qkl <- indice_qkl + 1
}
}
}
}
qkl_lambda = qkl * lambda_li
# Imprimindo o resultado da sensibilidade de h
print(qkl_lambda)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
teste = elementos_Sj*qkl_lambda
print(teste)
linhas_qkl_lambda <- length(qkl_lambda)
num_col_q <- ncol(Q)
num_segmentos <- linhas_qkl_lambda/num_linhas_lamb
if (length(qkl_lambda) %% num_segmentos==0){
tamanho_segmento <- length(qkl_lambda)/num_segmentos
segmentos <- split(teste, rep(1:num_segmentos, each = tamanho_segmento))
somatorio <- numeric(num_segmentos)
for (i in 1:num_segmentos) {
somatorio[i] <- sum(segmentos[[i]])
}
print(somatorio)
}
teste = elementos_Sj*qkl_lambda
print(teste)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
teste = elementos_Sj*qkl_lambda
print(teste)
num_segmentos <- num_colunas_q*num_linhas_q
if (length(qkl_lambda) %% num_segmentos==0){ #verifica se o tamanho do vetor está certo
tamanho_segmento <- length(qkl_lambda)/num_segmentos
segmentos <- split(teste, rep(1:num_segmentos, each = tamanho_segmento))
somatorio <- numeric()
for (i in 1:num_segmentos) {
somatorio[i] <- sum(segmentos[[i]])
}
print(somatorio)
}
teste = elementos_Sj*qkl_lambda
print(teste)
num_segmentos <- num_colunas_q*num_linhas_q
if (length(qkl_lambda) %% num_segmentos==0){ #verifica se o tamanho do vetor está certo
tamanho_segmento <- length(qkl_lambda)/num_segmentos
segmentos <- split(teste, rep(1:num_segmentos, each = tamanho_segmento))
somatorio <- numeric()
for (i in 1:num_segmentos) {
somatorio[i] <- sum(segmentos[[i]])
}
print(somatorio)
}
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
produto_sj_qkl_lambda = elementos_Sj*qkl_lambda
num_segmentos <- num_colunas_q*num_linhas_q
if (length(qkl_lambda) %% num_segmentos==0){ #verifica se o tamanho do vetor está certo
tamanho_segmento <- length(qkl_lambda)/num_segmentos
segmentos <- split(produto_sj_qkl_lambda, rep(1:num_segmentos, each = tamanho_segmento))
somatorio <- numeric()
for (i in 1:num_segmentos) {
somatorio[i] <- sum(segmentos[[i]])
}
print(somatorio)
print('######################################################################')
}
produto_sj_qkl_lambda = elementos_Sj*qkl_lambda
num_segmentos <- num_colunas_q*num_linhas_q
if (length(qkl_lambda) %% num_segmentos==0){ #verifica se o tamanho do vetor está certo
tamanho_segmento <- length(qkl_lambda)/num_segmentos
segmentos <- split(produto_sj_qkl_lambda, rep(1:num_segmentos, each = tamanho_segmento))
somatorio <- numeric()
for (i in 1:num_segmentos) {
somatorio[i] <- sum(segmentos[[i]])
}
print(somatorio)
print('######################################################################')
}
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
negativa_lambda = -lambda
elementos_negativa_lamb <- numeric()
elementos_Sj <- numeric()
indice_neg_lamb <- 1
indice_sj <- 1
for (i in 1:num_colunas) {
for (j in 1:num_colunas) {
for (k in 1:num_linhas) {
elementos_negativa_lamb[indice_neg_lamb] <- negativa_lambda[k, i]
indice_neg_lamb <- indice_neg_lamb + 1
elementos_Sj[indice_sj] <- s[j]
indice_sj <- indice_sj + 1
}
}
}
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
soma_pares
soma_impares
soma_pares
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
i
h1_aij_eixo_x
h2_aij_eixo_x
h1_aij_eixo_x[i]
h2_aij_eixo_x[i]
h1_aij_eixo_x[i]
h2_aij_eixo_x[i]
i
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
elementos_delta
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
gj
elementos_varQ
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
elementos_delta
hk_qij
gj
calc1
calc2
calc3
gj
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
gj
elementos_varQ
calc3
calc3
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
debugSource("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2 - V1.R", echo=TRUE)
source("C:/Users/fiasi/OneDrive/UTFPR/ACV - Cassia/Projeto ACV/Script projeto ACV - PARTE 2.R", echo=TRUE)
View(s)
View(g)
View(lambda)
View(g)
View(h)
View(M)
View(h_til)
View(h_til)
View(w)
